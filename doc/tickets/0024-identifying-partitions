#0024 Identifying partitions
=============

When loading an existing repository with one or more partitions:

1.  each partition has a 'base-name'
2.  each partition has a number
3.  by browsing the file system it should be possible to find partitions and
    each partition's base-name, but not its number (currently)

When a repository is loaded, we want to organise partitions by number in
memory even if the partition data is not loaded. This means we could:

a.  Load a header for each in order to read the numbers (slow in some cases?)
b.  Put the numbers in the 'base-name' (or instead of), and verify when loading
c.  Organise by the base-name in memory instead of the number
d.  Don't *organise* unloaded partitions; just keep them in a list

(a) would be simple to implement but could be slow on spinning disks or where
files are not present on the local system. (b) would work at the expense of
more constraints on file names.

(c) would require some rethinking. Would the 'classifier' still give a number
as output? If so, should it reliably reproduce the base-name from the number?
Or should it scan the list of base-names and make a guess? This might be
feasible but gives library users more work (and more to get wrong).

(d) is fine until some operation needs some partition. For example, inserting
a new element: the classifier gives us a partition number, but the only way we
have of finding the partition is to search them all. So this is just a lazy
version of (a) or (c) again.

----

Proposal: put the numbers in the file names (b), but leave it up to the RepoIO
to discover the numbers (in fact, nothing else need see the file names).
The RepoIO should allow finding a partition given a number.

But then the classifier turns 'properties' into an enumeration and the RepoIO
turns the enumeration into a name meaningful to the end user, and the two
are separate (unless using an Rc cell or something) and only communicate via
this enumeration. So, better, why not combine the two?
