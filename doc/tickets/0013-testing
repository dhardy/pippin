Tests
------

This is a long list of possible tests. Possibly it should be reorganised into multiple tickets;
for now implemented tests will simply be removed from the list.


### Reading from a fixed repo

*   lists of elements
*   contents of some elements
*   reading elements from snapshots and from commit logs
*   reading from historical (not latest) states
*   (TBD) partitions
*   Discovery of partition files

### New repositories

*   creating an empty repo

### Modifying in memory

*   inserting, deleting and modifying elements
*   forming new commits
*   getting element data
*   recovering element data from a previous version

### Modifying repos (on disk)

Element insertion, deletion and modification.

Commit creation.

Snapshot creation.

Repartitioning

Merges

"Discovery" system for updating logs, creating new logs and creating snapshots

### Special cases

Commit loops (reverting to prior states) in two cases: no snapshot within the
loop (rendering the last commit of the loop useless) and with a snapshot in the
loop (so that from the perspective of no history before the snapshot it is not
a loop):

*   creation via reverting
*   creation via "accidental" modification
*   reconstructing from log where no snapshots are involved
*   reconstructing from log where the last state of the loop is a snapshot
*   reconstructing from log where there is a snapshot in the middle of the loop
*   reading elements (for the above cases)
*   appending commits where the second state is a snapshot
*   appending commits where the second state is not a snapshot

### Reading damaged repos

Snapshots with missing commits

Commits with missing snapshots/parent states: state of incomplete information,
yet some information can be recovered (e.g. elements added in the commits).

### Performance testing

Large partitions (lots of data).

Long partitions (lots of commits).

Large repositories with multiple partitions.

Dealing with corruption of one or multiple files as best as possible

### Other features

Compression

Encryption

### Custom element types

Currently, only the default `String` implementation is used. Add a test using
something like `struct Pair { x: i32, y: i32 }`.
