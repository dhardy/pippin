Consider replacing the current `Element` structure (exposing a data section) with a user-defined one.

Current one is:

*   fast to load
*   simple

A templated implemenation for a user-defined type would:

*   allow more convenient access to user-defined details
*   allow classifiers and classifier caches to be integrated better
*   require 'repo', 'partition', 'commit' and 'state' types to be templated
*   could support the use of polymorphic elements via an enum or user-defined wrapper around a trait

A polymorphic approach using a trait would:

*   require a run-time-checked downcast or unsafe cast to access members
*   still allow better access to user-defined details than the current approach
*   allow direct support for polymorphic elements via a trait

------------

2016-01-07 : I (dhardy) have implemented a templated approach. So far it looks
okay (other than lots more template parameters), so it will probably stay.

New question: do we still need `Element`? Can we at least make `get_elt` in
`PartitionState` return a reference to the underlying type, not the `Element`
wrapper?
